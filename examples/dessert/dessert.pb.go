// Code generated by protoc-gen-gogo.
// source: dessert.proto
// DO NOT EDIT!

/*
Package dessert is a generated protocol buffer package.

It is generated from these files:
	dessert.proto

It has these top-level messages:
	Dessert
*/
package dessert

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/gogogqlproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A delicious dessert dish on the menu
type Dessert struct {
	// The name of the dish
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// How sweet is the dish, an integer between 0 and 10
	Sweetness int32 `protobuf:"varint,2,opt,name=sweetness,proto3" json:"sweetness,omitempty"`
}

func (m *Dessert) Reset()         { *m = Dessert{} }
func (m *Dessert) String() string { return proto.CompactTextString(m) }
func (*Dessert) ProtoMessage()    {}

func init() {
	proto.RegisterType((*Dessert)(nil), "flavortown.dessert.Dessert")
}
func (this *Dessert) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Dessert)
	if !ok {
		that2, ok := that.(Dessert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Sweetness != that1.Sweetness {
		return false
	}
	return true
}
func NewPopulatedDessert(r randyDessert, easy bool) *Dessert {
	this := &Dessert{}
	this.Name = randStringDessert(r)
	this.Sweetness = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Sweetness *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyDessert interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDessert(r randyDessert) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDessert(r randyDessert) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneDessert(r)
	}
	return string(tmps)
}
func randUnrecognizedDessert(r randyDessert, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldDessert(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldDessert(data []byte, r randyDessert, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateDessert(data, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		data = encodeVarintPopulateDessert(data, uint64(v2))
	case 1:
		data = encodeVarintPopulateDessert(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateDessert(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateDessert(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateDessert(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateDessert(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
