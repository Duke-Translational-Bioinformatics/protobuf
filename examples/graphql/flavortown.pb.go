// Code generated by protoc-gen-gogo.
// source: flavortown.proto
// DO NOT EDIT!

/*
Package graphql is a generated protocol buffer package.

It is generated from these files:
	flavortown.proto

It has these top-level messages:
	Menu
	LineItem
	Lunch
*/
package graphql

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"
import github_com_opsee_protobuf_gogogqlproto "github.com/opsee/protobuf/gogogqlproto"
import fmt "fmt"
import proto "github.com/gogo/protobuf/proto"
import math "math"
import _ "github.com/opsee/protobuf/proto/google/protobuf"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/opsee/protobuf/gogogqlproto"
import _ "github.com/opsee/protobuf/examples/dessert"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

var MenuType *github_com_graphql_go_graphql.Object
var LineItemType *github_com_graphql_go_graphql.Object
var LineItemDishUnion *github_com_graphql_go_graphql.Union
var LunchType *github_com_graphql_go_graphql.Object

func init() {
	MenuType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "menu",
		Description: "The menu at Guy’s American Kitchen & Bar reflects his signature style of authentic and surprising flavors",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"items": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(LineItemType),
					Description: "These dishes are crafted with the heart and soul of hometown favorites and infused with Guy’s big, daring flavors",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						switch obj := p.Source.(type) {
						case *Menu:
							return obj.Items, nil
						}
						return nil, fmt.Errorf("field items not resolved")
					},
				},
			}
		}),
	})
	LineItemType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "line_item",
		Description: "A line item representing a dish and price",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"price_cents": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Int,
					Description: "The price of the dish in cents",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						switch obj := p.Source.(type) {
						case *LineItem:
							return obj.PriceCents, nil
						}
						return nil, fmt.Errorf("field price_cents not resolved")
					},
				},
				"created_at": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_gogogqlproto.ByteString,
					Description: "A timestamp representing when the dish was added to the menu",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						switch obj := p.Source.(type) {
						case *LineItem:
							return obj.CreatedAt, nil
						}
						return nil, fmt.Errorf("field created_at not resolved")
					},
				},
				"updated_at": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_gogogqlproto.ByteString,
					Description: "A timestamp representing when the dish was updated",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						switch obj := p.Source.(type) {
						case *LineItem:
							return obj.UpdatedAt, nil
						}
						return nil, fmt.Errorf("field updated_at not resolved")
					},
				},
				"dish": &github_com_graphql_go_graphql.Field{
					Type:        LineItemDishUnion,
					Description: "The menu dish, can either be lunch or dessert",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LineItem)
						if !ok {
							return nil, fmt.Errorf("field dish not resolved")
						}
						return obj.GetDish(), nil
					},
				},
			}
		}),
	})
	LunchType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "lunch",
		Description: "A delicious lunch dish on the menu",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"name": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "The name of the dish",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						switch obj := p.Source.(type) {
						case *Lunch:
							return obj.Name, nil
						case *LineItem_Lunch:
							return obj.Lunch.Name, nil
						}
						return nil, fmt.Errorf("field name not resolved")
					},
				},
				"description": &github_com_graphql_go_graphql.Field{
					Type:        github_com_opsee_protobuf_gogogqlproto.ByteString,
					Description: "The description of the dish",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						switch obj := p.Source.(type) {
						case *Lunch:
							return obj.Description, nil
						case *LineItem_Lunch:
							return obj.Lunch.Description, nil
						}
						return nil, fmt.Errorf("field description not resolved")
					},
				},
			}
		}),
	})
	LineItemDishUnion = github_com_graphql_go_graphql.NewUnion(github_com_graphql_go_graphql.UnionConfig{
		Name:        "LineItemDish",
		Description: "The menu dish, can either be lunch or dessert",
		Types: []*github_com_graphql_go_graphql.Object{
			LunchType,
			flavortown_dessert.DessertType,
		},
		ResolveType: func(value interface{}, info github_com_graphql_go_graphql.ResolveInfo) *github_com_graphql_go_graphql.Object {
			switch value.(type) {
			case *LineItem_Lunch:
				return LunchType
			case *LineItem_Dessert:
				return flavortown_dessert.DessertType
			}
			return nil
		},
	})
}
