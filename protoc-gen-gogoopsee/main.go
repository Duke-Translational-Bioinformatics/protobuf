package main

import (
	"fmt"
	"github.com/gogo/protobuf/proto"
	"github.com/gogo/protobuf/protoc-gen-gogo/generator"
	plugin "github.com/gogo/protobuf/protoc-gen-gogo/plugin"
	"github.com/gogo/protobuf/vanity"
	"github.com/gogo/protobuf/vanity/command"
	"github.com/opsee/protobuf/plugin/graphql"
	"go/format"
	"os"
	"path"
	"strings"
)

func main() {
	req := command.Read()
	files := req.GetProtoFile()
	vanity.ForEachFile(files, vanity.TurnOnTestGenAll)
	vanity.ForEachFile(files, vanity.TurnOnEqualAll)
	vanity.ForEachFile(files, vanity.TurnOnPopulateAll)
	resp := generateGraphQL(req, command.Generate(req))
	command.Write(resp)
}

func generateGraphQL(req *plugin.CodeGeneratorRequest, resp *plugin.CodeGeneratorResponse) *plugin.CodeGeneratorResponse {
	// Begin by allocating a generator. The request and response structures are stored there
	// so we can do error handling easily - the response structure contains the field to
	// report failure.
	g := generator.New()
	g.Request = req

	g.CommandLineParameters(g.Request.GetParameter())

	// set the graphql package name
	for _, f := range g.Request.ProtoFile {
		gopkg := "graphql"
		f.Options.GoPackage = &gopkg
	}

	// Create a wrapped version of the Descriptors and EnumDescriptors that
	// point to the file that defines them.
	g.WrapTypes()

	g.SetPackageNames()
	g.BuildTypeNameMap()

	g.GeneratePlugin(graphql.NewGraphQL())

	gtest := generator.New()
	gtest.Request = g.Request
	// data, err := proto.Marshal(req)
	// if err != nil {
	// 	g.Error(err, "failed to marshal modified proto")
	// }
	// if err := proto.Unmarshal(data, gtest.Request); err != nil {
	// 	g.Error(err, "parsing modified proto")
	// }
	//
	// if len(gtest.Request.FileToGenerate) == 0 {
	// 	gtest.Fail("no files to generate")
	// }

	gtest.CommandLineParameters(gtest.Request.GetParameter())

	// Create a wrapped version of the Descriptors and EnumDescriptors that
	// point to the file that defines them.
	gtest.WrapTypes()

	gtest.SetPackageNames()
	gtest.BuildTypeNameMap()

	gtest.GeneratePlugin(graphql.NewTest())

	for i := 0; i < len(gtest.Response.File); i++ {
		if strings.Contains(*gtest.Response.File[i].Content, `//These tests are generated by github.com/opsee/protobuf/plugin/graphql`) {
			gtest.Response.File[i].Name = proto.String(strings.Replace(*gtest.Response.File[i].Name, ".pb.go", "pb_test.go", -1))
			g.Response.File = append(g.Response.File, gtest.Response.File[i])
		}
	}

	for i := 0; i < len(g.Response.File); i++ {
		formatted, err := format.Source([]byte(g.Response.File[i].GetContent()))
		if err != nil {
			g.Error(err, "go format error")
		}
		fmts := string(formatted)
		g.Response.File[i].Content = &fmts

		fname := *g.Response.File[i].Name
		g.Response.File[i].Name = proto.String(path.Join(path.Dir(fname), "graphql", path.Base(fname)))
		resp.File = append(resp.File, g.Response.File[i])
	}

	for _, f := range resp.File {
		fmt.Fprintln(os.Stderr, *f.Name)
	}

	return resp
}
